// data types in JS
 
primitive-> 

 number (range),  bigint ,string,boolean, null,  undefined,symbol

 Object-> 
 null is a object type:
 but undefined is type of undefined

  type of NaN -> number -> Not a Number

  Conversion Operation->>>>  let score=10
                                let new=string(score)
                                type of null to number is 0
                                true=1 and false=0
                                empty string is false in boolean datatype
                                and a string with letters is true in boolean datatype
Conversion Operation:  
                        Console.log(+true) -> 1 will not increase the value
                        Console.log(+"")->0
                        prifix and postfix in mdn js
                    
Comparision :   type Script -> does and don't
                console.log("1">2). true
                console.log("02">1)  false.    it will convert automatically to number

                console.log(null==0)     false
                console.log(null>=0)    true
                console.log(null>0)     false.     different behaviour in conversion

                also with undefined
                console.log(null==0)     false
                console.log(null>=0)    false
                console.log(null>0)     false.

                stict check. 
                console.log("2"===2)     //false


Data types : 
            # primitive type (7 categories ) these all are call by value
            string ,number, boolean, null, undefined, Symbol(to make any value special) ,BigInt
            # reference type or non-primitive. reference allocated in the memory

            Array, objects(browser web events ), functions, 


            two different Symbol type variables are never same  

            const bigNumber=1222n

            non-primitive

            Array -> [1,2,3,4];
            object -> let obj={
                name:"shiv",
                age:11
            }

store the function in the variable:
            const fun=function(){
                console.log("hello worldd")
            }

            special case of bigInt const bigNumber=3094829n.   -> is of the type Object
    

Memory Management in Java Script

            primitive type : stack
            non-primitive type : heap (change in anything will change in the main memory storage)


String interpolation:
            `` back ticks.  -> console.log(`My Name is ${} and i am studing in the college ${} `)

            string definition in another way-> const nameString=new String("Shivaraj")
                            This gives the name and vaule pairs.   
                            0:S
                            1:h
                            2:i
                            Key value pair access by nameString[0]
                            console.log(gameName.__proto__);

                             name.charAt(12)
                             name.indexOf('s')

                             name=shivaraj

                             const newName=name.substring(0,4)      // This will not include last number

                             using the slice:
                             cost anotherName=name.slice(-8,4)      // this gives the last 3 characters.  .. can use the negative values

                             using of .trime().   trim javascript mdn

                             const name=shiv;
                             .replace('shiv','SHIV')

                             url.include("shiv')
                             url.split('-')

                             Number as a function()
                             const number=new Number(100).  type is numbe. search for its property
                             console.log(number)
                             numebr.toFixed(2)    precision to 2 decimal

                             number.toPrecision(3)       -> will give that many numbers   12323->12.3^3

                             
                             const hundreds=10000000
                             console.log(hundreds.toLocaleString('en-IN'))


                             (Number.) -> in web

++++++++++++MATHC+++++++++++++++=
          {                  
                            console.log(Math)
                            console.abs(-3)
                            Math.round(4.3)
                            Math.ceil(4.2).  -> upper value-> always upper value of an increased value
                            Math.floor(4.9)
                            Math.min(1,2,3,4);
                            Math.random(). any value bw 0 and 1
                            Math.random()*10+1.     (to avode of getting 0)

                      }



Arrays--------------------

      {
          when copy of array-> shallow (share same reference )copy and deep copy(do not share same reference point)
                methods of the array

                const arr=new Array(1,2,3,4)
                unshift and shift           -> add to front and delete from the front

                .includes(2)
                .indexOf(1)
              const  newArray=myArray.join()  -> binds in a string and gives the same array as myArray.

              newArray.slice(1,3)   -> make a slice from index 1 to 2        ->  this will not change the original array.
              newArray.splice(1,3)      -> make a splice from inde 1 to 3 -> this will change thge change the original array.


              {     combining of arrays;->>>>>>>>
                arr1,arr2

              combing two array with different methods.

              arr1.push(arr2)       -> output will be as one element incread in the arr1
              const ar3=arr1.concat(arr2)     -> output will be combing in a single array         (store in a another array)

              const array4= [...arr1,...arr2]            -> spred operation 
              
              If we have a array with some number of arrays inside it. then use the "flat"
              arry=[1,2,3,[14,4,5,[4,5,6]]]
              arr2=arr.flat(infinity)       -> where we metion the depth of the number if array

                }

           { 
            log(Array.isArray("shiv))   -> false
            log(Array.from("hi"))       -> ['h','i']
            Has different behaviou in from.object

            s1=10
            s2=23
            s3=14
            
            Array.of(s1,s2,s4)          -> give me a array of those number
            }


      }




    ------------------<.... Objects.......>----------------

    {

        singletone Object creation.
    {    // Object literals
            ->
            const system = Symbol("key1)
        const object={
            name:"shiv",
            roll_no:10,
            disciplin:"computer sciece",
            location:"India",
            email: "shiv@mail.com",
            days:["monday","tuesday"],
            [system]="my1"                                      // if we have a bracket then it directly acts as symbol otherwise it will be strins as others.
        }

        log(object.name)
        log(object["name"])

        system.email="hsisk"
        Object.freez(system)

        // create a function here.
        system.greet=function(){
            log("hello world");
        }

        og(jsUser.greeting()) and other method is log(jsUser.greating)->>>>>>>>>>>>> reference 
        this.name -------->refered to object

                    }

    {
                const tinderUser=new Object() > this is singletone obejct
                const tinderUser={}         -> this is non singletine Oject

                We can neste the object one inside the others..

                const newObj={
                    emai:"shiv@mail",
                    fullName:{
                        UserFullName:{                              ???   use 
                            firstName:"shvi",
                            lastName:"chougala",
                        }
                    }
                }




            }

            {
                cosnt obj1={1:'a',2:'b'}
                cosnt obj2={3:'a',4:'b'}

                cosnt obj3={5:'a',6:'b'}

                to merge all the arrays ->
                   (1) const arrrayNew={obj1,obj2,obj3}
                  (2)  const arrayNew1=Object.assign({},obj1,pbj2,obj3)
                                the {} is cofirms that all the other objects are getting assigned to {}. not to any available arrays

                (3) -> spead operation ->> {...obj1,...obj2,...obj3}
              }       

              {
                get the keys and values from the object -> stores in an array.

                Object.keys(ObjectName)
                Object.values(ObjectName)
             .length()
                
                .entries(ObjectName)        -> get all the information from the object . output as -> array[array of each key and value]

                ObjectName.hasOwnProperty(isLogedIn)
              }


        
    Object Destructurnig -> 

                {
                    const course={
                        courseName:"js",
                        languege:"hindi",
                        courseInstructor:"shiv"
                    }

                    log(course.language)
                    or
                    const{courseInstructor:teacher}=course       log(teacher)       
   
                }



-------------------------------<Functions>-----------------------------------------
{

{
   
     function userInfromation(name){
                    return `${name} just logged In`
                }

                log(userInfromation())          -> different ouput that -> undefined just logged in
                log(userInfromation(""))        -> just loggged in

                function userInfromation(name="shivaraj"){
                    if(name)
                    return `${name} just logged In`
                }

                log(userInformation("shiv))                 -> this overwrites the name "shivaraj"

}   

            {
                function nameOfFunction(...num1){
                    return num1
                }

                log(nameOfFunction(10,20,30,40))            -> i want to give multiple values.

                =>output is [10,20,30,40]

                function nameOfFunction(value1,value2...num1){
                    return num1
                }

                log(nameOfFunction(10,20,30,40)) 
                =>output is [30,40]         The other two value are held in value1 and value2`
 


        }


        }
 

    } 



-------------------------------<Scope>-----------------------------------------
{    * Block scope and global scope
behaviour scope in code envirment and in the browser is different

# closures In js
# DOM->document object model- html web page manupilate thorough js

                


//----> store a function in a variable{
    print(2)    // function call
    funtion print(num){
        log(num)
    }

    print1(2)       // this is function call . "gives error"
   const temp= function print2(num)                                 { Expression type function}
    log(num1)
    
    

    Hoisting        ------------------------>

}

                }



            




-------------------------------<Arrow Function>-----------------------------------------
  {
    Arrow Function->s


                    In brwoser -> Global object is Window:  if we run "this" in web console -> we get output as window
                    But if we print log(this) _> in node enviorment -> gives as "{}" -> empty objects

                // "this" is not working in functions....


        const fun=()=>{


            implecit return -> cosnt func= ()=>  a+b        -> no return for this

                        we dont use the curly brace here->but the paranthesis

                        -> even to return the object we wrap in the paranthesis

            const funn=( n ) => ({name:"shiv",age:n})

            console.log(funn(1));
        }

  }



-------------------------------<iife>-----------------------------------------

{   
            Immediately invoked function expression


            we should have a semicolon at the end of the function.....

            (()=>{
                log("hello world)
            })();

            (function(){                    -> this is a named IIFE 
                 console.log("hello world22");
                
             })();


}





-------------------------------<JavaScript Execution Context>-----------------------------------------

1) global execution context -> {}
2) function Execution context
3) eval E C

-> memory creation phase.
-> Execution phase


flow->

1)gloabl execetion -> this
2)memory phase-> all variables make them as undefined even if theyare assigned
3)  put all the assigned values to their respective variable



=> when function run-> creates->        newexecetional context creats (new Variables envirment+ execution thread )
                            again memory creational and executional phse     delete after execution


    return of values to blobal excutional context





-------------------------------<control Flow>-----------------------------------------

{
    "break" is to break the controll flow.

    -> if we dont put the break the case in switch,  then all the cases will get executed but not the default.


    falsy value-> false,NaN,null,undefined,0,-0,bigInt 0n,"",

    truthy values-> "0", 'false', " ", [], {}, function(){}-> empty function



    To check whether the objct is empty or not->
                if(Object.keys(objectName).length===0)  .log(empty object)          -> here function returns as a array

}



nullish coalescing operator (??)-------------------------->

        for null and undefined

        val1=10??20 log(val1)-> 10
        val1=null ?? 23 -> 23





-------------------------------<MAP>-----------------------------------------


for of loop and for in loop

for of loop will not works for object but for in loop works
cosnt map=new MAP()
map.set(1,"INDIA")
map.set(2,"US")
map.set(3,"Russia")
map.set(4,"chaina")


for(const [key,val] of map );
log(key val)


loop for obj.
for(const key in objectName)
    .log()


arraName.forEach(function(item){
    log(item)
})


arraName.forEach((item)=>{
    log(item)
})
                                                                    --------> call back function
// we cann write the function outside and just call for each loop

function printMe(item){
    log(item);
}
arrayName.forEach(printMe) -> we have not given function but just a reference


// another variant

arraName.forEach((item,index,arr)=>{
    log(item,index,arr)
})



// we can have forEach loop on aray of objects

// use of filters

const array=[1,2,3,4,5,6,7]

const vals=array.filter((item)=>item>4)
                                                        -> filter retuns some value
log(vals)


//
const vals=array.filter((item)=>{
    return item>4
                                    we return item here
})


                arrayName.push(val)


// use of map here

const array=[1,2,3,4,5,6]
const ar=array.map((value)=> value+10)
log(ar )


// Chaining....

use multiple map or filter in the form of chain

// use of the reduce ---------------------->
const array=[1,2,3,4,5,5,6,7,8]


const temp=array.reduce((acc,curentValue)=>{
    return acc+currentValue
},0)


const temp=array.reduce((acc,curentValue)=>
acc+currentValue
,0)


